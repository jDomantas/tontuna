This is a program written in literate style.

While normally we write programs as "code with added comments", Tontuna allows
us to flip this the other way around - programs can be written as "comments with
added code". While in the regular mode all text is by default assumed to be
code and comments need to be prefixed with '#', in literate mode text is a
comment by default and instead we prefix code with '>' (just like we do when we
want to embed code inside a comment).

As programs still have the ability to introspect their own source, we will build
a little demo - this program will format its own source as a nice little
markdown document.

For starters, we have our main function that will retrieve the code and invoke
formatting implementation. And also print out a header because I felt like
including something extra in here. Here you go:

> fn main() {
>     print("# Literate mode!");
>     emit_markdown(program_source());
> }

For simplicity we will have very simple and minimal formatting functionality.
All text (which is really comments under the hood) will be written out as text
directly to markdown, and code will be emitted as code blocks. Here's a function
that iterates over the elements in the source and dispatches to appropriate
emitting functions:

> fn emit_markdown(code) {
>     for item in code {
>         if let comment: Comment = item {
>             emit_comment(comment);
>         } else if let code: Code = item {
>             emit_code(code);
>         }
>     }
> }

Now we need the two functions for formatting code and comments. For comments
there's not much to do, we just print out the text:

> fn emit_comment(comment) {
>     println(comment.whole_text);
> }

For code the solution is the same, we just need to emit the code fences. Also we
will pretend that the code is Rust because the languages are syntactically
similar enough to give us decent syntax highlighting.

> fn emit_code(code) {
>     println("```rust");
>     println(code.whole_text);
>     println("```");
> }

And that's it! You can run this file directly and it will print out a markdown
version of itself. Of course, the markdown version is not runnable, but you can
render that one and it will probably be more pleasant to read that this
monospaced wall of text.
